# Generated by sila2.code_generator; sila2.__version__: 0.10.3
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.etoad import EtoadBase, RunJob_IntermediateResponses, RunJob_Responses

if TYPE_CHECKING:
    from ..server import Server


from etoad import WorkflowManager

from pathlib import Path



class EtoadImpl(EtoadBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def RunJob(
        self,
        JobFile: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[RunJob_IntermediateResponses],
    ) -> RunJob_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        

        jobdict = eval(JobFile)

        tests = Path("./Tests/test_settings/")
        echem = WorkflowManager(
            logger_settings= tests/"logger_settings.json",
            potentiostat_settings= tests/"potentiostat_settings.json",
            sampler_settings= tests/"sampler_settings.json",
            data_path = "etoad_data",
            logfile="etoad_log.log",
        )

        samplelist = []

        samplelist.append(jobdict)

        echem.submit_samples(samplelist)

        results = echem.start_system()

        print(results)
        
        return RunJob_Responses(results)
